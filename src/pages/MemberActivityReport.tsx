import { useEffect, useState, useRef } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '@/components/ui/dialog';
import { Switch } from '@/components/ui/switch';
import { Label } from '@/components/ui/label';
import { ArrowLeft, Download, FileText, Eye, BarChart3 } from 'lucide-react';
import { useNavigate } from 'react-router-dom';
import { exportTableToPdfWithLogo, getCurrentTimestamp } from '@/lib/pdf';
import { useToast } from '@/hooks/use-toast';
import { db, initLocalDb } from '@/lib/db';
import html2canvas from 'html2canvas';
import jsPDF from 'jspdf';

const MemberActivityReport = () => {
  const navigate = useNavigate();
  const { toast } = useToast();
  const [selectedMember, setSelectedMember] = useState('');
  const [members, setMembers] = useState<any[]>([]);
  const [memberAttendance, setMemberAttendance] = useState<any[]>([]);
  const [showPreview, setShowPreview] = useState(false);
  const [includeGraph, setIncludeGraph] = useState(false);
  const previewRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    const loadData = async () => {
      await initLocalDb();
      const allMembers = await db.members.toArray();
      setMembers(allMembers);
    };
    loadData();
  }, []);

  useEffect(() => {
    const loadMemberAttendance = async () => {
      if (selectedMember) {
        await initLocalDb();
        const attendance = await db.attendance.where('memberId').equals(selectedMember).toArray();
        setMemberAttendance(attendance);
      } else {
        setMemberAttendance([]);
      }
    };
    loadMemberAttendance();
  }, [selectedMember]);

  const selectedMemberData = members.find(m => m.id === selectedMember);

  const handleExport = (format: 'pdf' | 'csv') => {
    if (format === 'pdf' && selectedMemberData) {
      const columns = [
        { header: 'Session', dataKey: 'session' },
        { header: 'Date', dataKey: 'date' },
        { header: 'Check-in', dataKey: 'checkInTime' },
      ];
      const rows = memberAttendance.map((r, idx) => ({
        session: `#${r.id ?? idx + 1}`,
        date: r.date,
        checkInTime: r.checkInTime,
      }));
      exportTableToPdfWithLogo({
        title: `Member Activity • ${selectedMemberData.fullName} (${selectedMemberData.id})`,
        subtitle: `Email: ${selectedMemberData.email} • Status: ${selectedMemberData.status}`,
        columns,
        rows,
        filename: `member_activity_${selectedMemberData.id}`,
        footnote: `Generated by PowerLift Fitness Gym on ${getCurrentTimestamp()}`,
        logoUrl: '/logo.png',
        logoWidthPx: 80,
        includeSignatures: true,
      });
      toast({ title: 'Exported PDF', description: 'Member activity report downloaded.' });
      return;
    }
    
    if (format === 'csv' && selectedMemberData) {
      // Create CSV content
      const headers = ['Session', 'Date', 'Check-in Time'];
      const csvRows = memberAttendance.map((r, idx) => [
        `#${r.id ?? idx + 1}`,
        r.date,
        r.checkInTime,
      ]);
      
      const csvContent = [
        // Header information
        `Member Activity Report`,
        `Member: ${selectedMemberData.fullName} (${selectedMemberData.id})`,
        `Email: ${selectedMemberData.email}`,
        `Status: ${selectedMemberData.status}`,
        `Start Date: ${selectedMemberData.membershipStartDate}`,
        `Expiry Date: ${selectedMemberData.membershipExpiryDate}`,
        '',
        `Total Check-ins: ${memberAttendance.length}`,
        `Avg. Weekly Visits: 3.2`,
        `Attendance Rate: 85%`,
        '',
        // Column headers
        headers.join(','),
        // Data rows
        ...csvRows.map(row => row.join(',')),
        '',
        `Generated by PowerLift Fitness Gym on ${getCurrentTimestamp()}`,
      ].join('\n');
      
      // Create and download the file
      const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
      const link = document.createElement('a');
      const url = URL.createObjectURL(blob);
      link.setAttribute('href', url);
      link.setAttribute('download', `member_activity_${selectedMemberData.id}.csv`);
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      
      toast({ title: 'Exported CSV', description: 'Member activity report downloaded.' });
      return;
    }
  };

  const handleDownloadPreviewAsPDF = async () => {
    if (!previewRef.current || !selectedMemberData) return;
    
    try {
      const canvas = await html2canvas(previewRef.current, {
        scale: 2,
        backgroundColor: '#ffffff',
        logging: false,
      });
      
      const imgData = canvas.toDataURL('image/png');
      const pdf = new jsPDF({
        orientation: 'portrait',
        unit: 'mm',
        format: 'a4',
      });
      
      const imgWidth = 210; // A4 width in mm
      const imgHeight = (canvas.height * imgWidth) / canvas.width;
      
      pdf.addImage(imgData, 'PNG', 0, 0, imgWidth, imgHeight);
      pdf.save(`member_activity_preview_${selectedMemberData.id}.pdf`);
      
      toast({ title: 'Downloaded PDF', description: 'Preview downloaded as PDF.' });
      setShowPreview(false);
    } catch (error) {
      toast({ 
        title: 'Error', 
        description: 'Failed to generate PDF from preview.', 
        variant: 'destructive' 
      });
    }
  };

  return (
    <div className="space-y-6">
      <div className="flex items-center gap-4">
        <Button variant="ghost" size="sm" onClick={() => navigate('/reports')}>
          <ArrowLeft className="h-4 w-4 mr-2" />
          Back to Reports
        </Button>
        <div>
          <h1 className="text-3xl font-bold">Member Activity Report</h1>
          <p className="text-muted-foreground">Analyze individual member attendance and activity patterns</p>
        </div>
      </div>

      {/* Member Selection */}
      <Card className="border-0 shadow-md">
        <CardHeader>
          <CardTitle>Select Member</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <Select value={selectedMember} onValueChange={setSelectedMember}>
              <SelectTrigger>
                <SelectValue placeholder="Choose a member to analyze" />
              </SelectTrigger>
              <SelectContent>
                {members.length > 0 ? (
                  members.map((member) => (
                    <SelectItem key={member.id} value={member.id}>
                      {member.fullName} ({member.id})
                    </SelectItem>
                  ))
                ) : (
                  <SelectItem value="no-members" disabled>
                    No members available
                  </SelectItem>
                )}
              </SelectContent>
            </Select>
            <div className="flex gap-2">
              <Button 
                onClick={() => setShowPreview(true)} 
                variant="default" 
                className="flex-1" 
                disabled={!selectedMember}
              >
                <Eye className="h-4 w-4 mr-2" />
                Preview Report
              </Button>
              <Button onClick={() => handleExport('pdf')} variant="outline" className="flex-1" disabled={!selectedMember}>
                <FileText className="h-4 w-4 mr-2" />
                Export PDF
              </Button>
              <Button onClick={() => handleExport('csv')} variant="outline" className="flex-1" disabled={!selectedMember}>
                <Download className="h-4 w-4 mr-2" />
                Export CSV
              </Button>
            </div>
          </div>
        </CardContent>
      </Card>

      {selectedMemberData && (
        <>
          {/* Member Info */}
          <Card className="border-0 shadow-md">
            <CardHeader>
              <CardTitle>Member Information</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <p><strong>Name:</strong> {selectedMemberData.fullName}</p>
                  <p><strong>ID:</strong> {selectedMemberData.id}</p>
                  <p><strong>Email:</strong> {selectedMemberData.email}</p>
                </div>
                <div>
                  <p><strong>Start Date:</strong> {selectedMemberData.membershipStartDate}</p>
                  <p><strong>Expiry Date:</strong> {selectedMemberData.membershipExpiryDate}</p>
                  <p><strong>Status:</strong> {selectedMemberData.status}</p>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Activity Stats */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <Card className="border-0 shadow-md">
              <CardContent className="pt-6 text-center">
                <p className="text-2xl font-bold text-primary">{memberAttendance.length}</p>
                <p className="text-sm text-muted-foreground">Total Check-ins</p>
              </CardContent>
            </Card>
            <Card className="border-0 shadow-md">
              <CardContent className="pt-6 text-center">
                <p className="text-2xl font-bold text-success">3.2</p>
                <p className="text-sm text-muted-foreground">Avg. Weekly Visits</p>
              </CardContent>
            </Card>
            <Card className="border-0 shadow-md">
              <CardContent className="pt-6 text-center">
                <p className="text-2xl font-bold text-accent">85%</p>
                <p className="text-sm text-muted-foreground">Attendance Rate</p>
              </CardContent>
            </Card>
          </div>

          {/* Attendance History */}
          <Card className="border-0 shadow-md">
            <CardHeader>
              <CardTitle>Recent Attendance History</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-3">
                {memberAttendance.length > 0 ? (
                  memberAttendance.map((record) => (
                    <div key={record.id} className="flex items-center justify-between p-3 bg-muted/30 rounded-lg">
                      <div>
                        <p className="font-medium">Check-in</p>
                        <p className="text-sm text-muted-foreground">Session #{record.id}</p>
                      </div>
                      <div className="text-right">
                        <p className="font-medium">{record.checkInTime}</p>
                        <p className="text-sm text-muted-foreground">{record.date}</p>
                      </div>
                    </div>
                  ))
                ) : (
                  <p className="text-center text-muted-foreground py-8">No attendance records found for this member</p>
                )}
              </div>
            </CardContent>
          </Card>

          {/* Signature Section */}
          <Card className="border-0 shadow-md">
            <CardHeader>
              <CardTitle>Signatures</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
                <div className="flex flex-col justify-end">
                  <div className="h-16" />
                  <div className="border-t border-border" />
                  <p className="text-sm text-muted-foreground mt-2 text-center">Prepared by</p>
                  <p className="text-xs text-muted-foreground text-center">Name & Signature</p>
                </div>
                <div className="flex flex-col justify-end">
                  <div className="h-16" />
                  <div className="border-t border-border" />
                  <p className="text-sm text-muted-foreground mt-2 text-center">Checked by</p>
                  <p className="text-xs text-muted-foreground text-center">Name & Signature</p>
                </div>
                <div className="flex flex-col justify-end">
                  <div className="h-16" />
                  <div className="border-t border-border" />
                  <p className="text-sm text-muted-foreground mt-2 text-center">Approved by</p>
                  <p className="text-xs text-muted-foreground text-center">Name & Signature</p>
                </div>
              </div>
              <p className="text-xs text-muted-foreground mt-6">Date: {new Date().toLocaleDateString()}</p>
            </CardContent>
          </Card>
        </>
      )}

      {/* Preview Report Modal */}
      <Dialog open={showPreview} onOpenChange={setShowPreview}>
        <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle>Member Activity Report Preview</DialogTitle>
            <div className="flex items-center gap-4 mt-4">
              <div className="flex items-center gap-2">
                <Switch
                  id="include-graph"
                  checked={includeGraph}
                  onCheckedChange={setIncludeGraph}
                />
                <Label htmlFor="include-graph" className="text-sm font-normal">
                  Include Attendance Graph
                </Label>
              </div>
            </div>
          </DialogHeader>

          <div ref={previewRef} className="bg-white p-8 rounded-lg">
            {/* Header with Logo */}
            <div className="text-center mb-6">
              <img src="/logo.png" alt="PowerLift Fitness" className="w-20 h-20 mx-auto mb-4" />
              <h1 className="text-2xl font-bold text-gray-900">Power Lift Fitness</h1>
              <h2 className="text-xl font-semibold text-gray-800 mt-2">Member Activity Report</h2>
              <p className="text-sm text-gray-600 mt-1">Analyze individual member attendance and activity patterns</p>
            </div>

            <div className="border-t-2 border-gray-300 my-6"></div>

            {/* Member Information */}
            {selectedMemberData && (
              <>
                <div className="mb-6">
                  <h3 className="text-lg font-semibold text-gray-900 mb-4">Member Information</h3>
                  <div className="grid grid-cols-2 gap-4 bg-gray-50 p-4 rounded-lg">
                    <div>
                      <p className="text-sm text-gray-600">Name</p>
                      <p className="font-medium text-gray-900">{selectedMemberData.fullName}</p>
                    </div>
                    <div>
                      <p className="text-sm text-gray-600">Member ID</p>
                      <p className="font-medium text-gray-900">{selectedMemberData.id}</p>
                    </div>
                    <div>
                      <p className="text-sm text-gray-600">Email</p>
                      <p className="font-medium text-gray-900">{selectedMemberData.email}</p>
                    </div>
                    <div>
                      <p className="text-sm text-gray-600">Status</p>
                      <p className="font-medium text-gray-900 capitalize">{selectedMemberData.status}</p>
                    </div>
                    <div>
                      <p className="text-sm text-gray-600">Start Date</p>
                      <p className="font-medium text-gray-900">{selectedMemberData.membershipStartDate}</p>
                    </div>
                    <div>
                      <p className="text-sm text-gray-600">Expiry Date</p>
                      <p className="font-medium text-gray-900">{selectedMemberData.membershipExpiryDate}</p>
                    </div>
                  </div>
                </div>

                {/* Attendance Summary */}
                <div className="mb-6">
                  <h3 className="text-lg font-semibold text-gray-900 mb-4">Attendance Summary</h3>
                  <div className="grid grid-cols-3 gap-4">
                    <div className="bg-red-50 border border-red-200 p-4 rounded-lg text-center">
                      <p className="text-3xl font-bold text-red-600">{memberAttendance.length}</p>
                      <p className="text-sm text-gray-700 mt-1">Total Check-ins</p>
                    </div>
                    <div className="bg-green-50 border border-green-200 p-4 rounded-lg text-center">
                      <p className="text-3xl font-bold text-green-600">3.2</p>
                      <p className="text-sm text-gray-700 mt-1">Avg. Weekly Visits</p>
                    </div>
                    <div className="bg-blue-50 border border-blue-200 p-4 rounded-lg text-center">
                      <p className="text-3xl font-bold text-blue-600">85%</p>
                      <p className="text-sm text-gray-700 mt-1">Attendance Rate</p>
                    </div>
                  </div>
                </div>

                {/* Attendance Graph (Optional) */}
                {includeGraph && (
                  <div className="mb-6">
                    <h3 className="text-lg font-semibold text-gray-900 mb-4">Attendance Trend</h3>
                    <div className="bg-gray-50 border border-gray-200 p-6 rounded-lg">
                      <div className="flex items-end justify-around h-48 gap-2">
                        {[4, 3, 5, 2, 4, 3, 4].map((value, idx) => (
                          <div key={idx} className="flex flex-col items-center flex-1">
                            <div 
                              className="w-full bg-gradient-to-t from-red-500 to-red-400 rounded-t-md transition-all"
                              style={{ height: `${(value / 5) * 100}%` }}
                            ></div>
                            <p className="text-xs text-gray-600 mt-2">Week {idx + 1}</p>
                          </div>
                        ))}
                      </div>
                      <p className="text-xs text-gray-500 text-center mt-4">Weekly check-ins over the last 7 weeks</p>
                    </div>
                  </div>
                )}

                {/* Attendance History Table */}
                <div className="mb-6">
                  <h3 className="text-lg font-semibold text-gray-900 mb-4">Recent Attendance History</h3>
                  <div className="overflow-x-auto border border-gray-200 rounded-lg">
                    <table className="w-full">
                      <thead className="bg-gray-800 text-white">
                        <tr>
                          <th className="px-4 py-3 text-left text-sm font-semibold">Session</th>
                          <th className="px-4 py-3 text-left text-sm font-semibold">Date</th>
                          <th className="px-4 py-3 text-left text-sm font-semibold">Time In</th>
                          <th className="px-4 py-3 text-left text-sm font-semibold">Time Out</th>
                          <th className="px-4 py-3 text-left text-sm font-semibold">Duration</th>
                        </tr>
                      </thead>
                      <tbody>
                        {memberAttendance.length > 0 ? (
                          memberAttendance.map((record, idx) => (
                            <tr key={record.id} className={idx % 2 === 0 ? 'bg-white' : 'bg-gray-50'}>
                              <td className="px-4 py-3 text-sm text-gray-900">#{record.id ?? idx + 1}</td>
                              <td className="px-4 py-3 text-sm text-gray-900">{record.date}</td>
                              <td className="px-4 py-3 text-sm text-gray-900">{record.checkInTime}</td>
                              <td className="px-4 py-3 text-sm text-gray-900">{record.checkOutTime || '-'}</td>
                              <td className="px-4 py-3 text-sm text-gray-900">
                                {record.checkOutTime ? '2h 30m' : 'In progress'}
                              </td>
                            </tr>
                          ))
                        ) : (
                          <tr>
                            <td colSpan={5} className="px-4 py-8 text-center text-gray-500">
                              No attendance records found for this member
                            </td>
                          </tr>
                        )}
                      </tbody>
                    </table>
                  </div>
                </div>

                {/* Signatures */}
                <div className="mb-6">
                  <h3 className="text-lg font-semibold text-gray-900 mb-4">Signatures</h3>
                  <div className="grid grid-cols-3 gap-8">
                    <div>
                      <div className="h-16 border-b-2 border-gray-300 mb-2"></div>
                      <p className="text-sm text-gray-700 text-center font-medium">Prepared by</p>
                      <p className="text-xs text-gray-500 text-center">Name & Signature</p>
                    </div>
                    <div>
                      <div className="h-16 border-b-2 border-gray-300 mb-2"></div>
                      <p className="text-sm text-gray-700 text-center font-medium">Checked by</p>
                      <p className="text-xs text-gray-500 text-center">Name & Signature</p>
                    </div>
                    <div>
                      <div className="h-16 border-b-2 border-gray-300 mb-2"></div>
                      <p className="text-sm text-gray-700 text-center font-medium">Approved by</p>
                      <p className="text-xs text-gray-500 text-center">Name & Signature</p>
                    </div>
                  </div>
                  <p className="text-xs text-gray-500 mt-4">Date: {new Date().toLocaleDateString()}</p>
                </div>

                {/* Footer */}
                <div className="border-t-2 border-gray-300 pt-4 text-center">
                  <p className="text-xs text-gray-600">
                    Generated by PowerLift Fitness Gym on {getCurrentTimestamp()}
                  </p>
                  <p className="text-xs text-gray-500 mt-1">
                    This is a computer-generated document. No signature is required.
                  </p>
                </div>
              </>
            )}
          </div>

          <DialogFooter className="gap-2">
            <Button variant="outline" onClick={() => setShowPreview(false)}>
              Close
            </Button>
            <Button onClick={handleDownloadPreviewAsPDF}>
              <FileText className="h-4 w-4 mr-2" />
              Download as PDF
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
};

export default MemberActivityReport;